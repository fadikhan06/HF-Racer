#include <iostream>
#include <conio.h>
#include <windows.h>
#include <ctime>
#include <fstream>
#include <string>
#include <mmsystem.h>

#pragma comment(lib, "winmm.lib")

#define SCREEN_WIDTH 90
#define SCREEN_HEIGHT 26
#define WIN_WIDTH 70

using namespace std;

HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
COORD CursorPosition;

struct Player {
	string name;
	int age;
} player1;

int enemyY[3];
int enemyX[3];
bool enemyFlag[3];

char car[4][4] = {
	{' ', 'O', 'O', ' '},
	{'O', '*', '*', 'O'},
	{' ', '*', '*', ' '},
	{'O', '*', '*', 'O'}
};
int carPos = WIN_WIDTH / 2;
int score = 0;
int highScore = 0;

void gotoxy(int x, int y) {
	CursorPosition.X = x;
	CursorPosition.Y = y;
	SetConsoleCursorPosition(console, CursorPosition);
}

void setcursor(bool visible, DWORD size) {
	if (size == 0)
		size = 20;

	CONSOLE_CURSOR_INFO lpCursor;
	lpCursor.bVisible = visible;
	lpCursor.dwSize = size;
	SetConsoleCursorInfo(console, &lpCursor);
}

void drawBorder() {
	for (int i = 0; i < SCREEN_HEIGHT; i++) {
		for (int j = 0; j < 17; j++) {
			gotoxy(0 + j, i); cout << "*";
			gotoxy(WIN_WIDTH - j, i); cout << "*";
		}
	}
	for (int i = 0; i < SCREEN_HEIGHT; i++) {
		gotoxy(SCREEN_WIDTH, i); cout << "*";
	}
}

void genEnemy(int ind) {
	enemyX[ind] = 17 + rand() % (33);
}

void drawEnemy(int ind) {
	if (enemyFlag[ind]) {
		gotoxy(enemyX[ind], enemyY[ind]); cout << "|  |";
		gotoxy(enemyX[ind], enemyY[ind] + 1); cout << "0**0";
		gotoxy(enemyX[ind], enemyY[ind] + 2); cout << " ** ";
		gotoxy(enemyX[ind], enemyY[ind] + 3); cout << "0**0";
	}
}

void eraseEnemy(int ind) {
	if (enemyFlag[ind]) {
		gotoxy(enemyX[ind], enemyY[ind]); cout << "    ";
		gotoxy(enemyX[ind], enemyY[ind] + 1); cout << "    ";
		gotoxy(enemyX[ind], enemyY[ind] + 2); cout << "    ";
		gotoxy(enemyX[ind], enemyY[ind] + 3); cout << "    ";
	}
}

void resetEnemy(int ind) {
	eraseEnemy(ind);
	enemyY[ind] = 1;
	genEnemy(ind);
}

void drawCar() {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			gotoxy(j + carPos, i + 22);
			cout << car[i][j];
		}
	}
}

void eraseCar() {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			gotoxy(j + carPos, i + 22);
			cout << " ";
		}
	}
}

bool collision() {
	if (enemyY[0] + 4 >= 23) {
		if (enemyX[0] + 4 - carPos >= 0 && enemyX[0] + 4 - carPos < 9) {
			return true;
		}
	}
	return false;
}

void gameOver() {
	system("cls");
	PlaySound("music3.wav", NULL, SND_ASYNC);
	system("color 0D");

	// Updating high score if current score is higher
	if (score > highScore) {
		highScore = score;
		ofstream fileout("highscore.dat");
		fileout << highScore;
		fileout.close();
	}

	cout << endl;
	cout << "\t\t\t\t\t\t--------------------------" << endl;
	cout << "\t\t\t\t\t\t-------- Game Over -------" << endl;
	cout << "\t\t\t\t\t\t--------------------------" << endl;
	cout << "\t\t\t\t\t\t--------------------------" << endl;
	cout << "\t\t\t\t\t\t-------- Get better ------" << endl;
	cout << "\t\t\t\t\t\t--------------------------" << endl << endl;
	cout << "\t\t\t\t\t\tYour Score: " << score << endl;
	cout << "\t\t\t\t\t\tHigh Score: " << highScore << endl;
	cout << "\t\t\t\t\t\tPress any key to return to menu.";
	_getch();
}

void updateScore() {
	gotoxy(WIN_WIDTH + 7, 5);
	cout << "Score: " << score << endl;
}

void instructions() {
	system("color 0D");
	system("cls");
	cout << "Instructions";
	cout << "\n----------------";
	cout << "\n Avoid Cars by moving left or right. ";
	cout << "\n\n Press 'a' to move left";
	cout << "\n Press 'd' to move right";
	cout << "\n Press 'escape' to exit";
	cout << "\n\nPress any key to go back to menu";
	_getch();
}

void play() {
	system("color 0D");
	carPos = -1 + WIN_WIDTH / 2;
	score = 0;
	enemyFlag[0] = true;
	enemyFlag[1] = false;
	enemyY[0] = enemyY[1] = 1;

	system("cls");
	drawBorder();
	updateScore();
	genEnemy(0);
	genEnemy(1);

	gotoxy(WIN_WIDTH + 7, 2); cout << "BUMP3RS";
	gotoxy(WIN_WIDTH + 6, 4); cout << "----------";
	gotoxy(WIN_WIDTH + 6, 6); cout << "----------";
	gotoxy(WIN_WIDTH + 7, 12); cout << "Controls ";
	gotoxy(WIN_WIDTH + 7, 13); cout << "-------- ";
	gotoxy(WIN_WIDTH + 2, 14); cout << " a to move left ";
	gotoxy(WIN_WIDTH + 2, 15); cout << " d to move right ";

	gotoxy(18, 5); cout << "Press any key to start";
	_getch();
	gotoxy(18, 5); cout << "                      ";

	// where the magic is happening //
	while (1) {
		if (_kbhit()) {
			char ch = _getch();
			if (ch == 'a' || ch == 'A') {
				if (carPos > 18)
					carPos -= 4;
			}
			if (ch == 'd' || ch == 'D') {
				if (carPos < 50)
					carPos += 4;
			}
			if (ch == 27) {
				break;
			}
		}

		drawCar();
		drawEnemy(0);
		drawEnemy(1);
		if (collision()) {
			gameOver();
			return;
		}
		Sleep(50);
		eraseCar();
		eraseEnemy(0);
		eraseEnemy(1);

		if (enemyY[0] == 10 && !enemyFlag[1])
			enemyFlag[1] = true;

		if (enemyFlag[0])
			enemyY[0] += 1;

		if (enemyFlag[1])
			enemyY[1] += 1;

		if (enemyY[0] > SCREEN_HEIGHT - 4) {
			resetEnemy(0);
			score++;
			updateScore();
		}
		if (enemyY[1] > SCREEN_HEIGHT - 4) {
			resetEnemy(1);
			score++;
			updateScore();
		}
	}
}

void loadHighScore() {
	ifstream filein("highscore.dat");
	if (filein.is_open()) {
		filein >> highScore;
		filein.close();
	}
}

int main() {
	setcursor(0, 0);
	srand((unsigned)time(NULL));
	system("color 0D");

	loadHighScore();

	cout << "Enter player name: ";
	cin >> player1.name;
	cout << "Enter player age: ";
	cin >> player1.age;

	ofstream fileout("player.dat");
	fileout << player1.name << endl;
	fileout << player1.age << endl;
	fileout.close();

	while (true) {
		system("color 0D");
		system("cls");
		gotoxy(10, 5); cout << " \t\t\t\t\t-------------------------- ";
		gotoxy(10, 6); cout << " \t\t\t\t\t|        BUMP3RS       | ";
		gotoxy(10, 7); cout << " \t\t\t\t\t--------------------------";
		gotoxy(10, 9); cout << "\t\t\t\t\t1. Start Game";
		gotoxy(10, 10); cout << "\t\t\t\t\t2. Instructions";
		gotoxy(10, 11); cout << "\t\t\t\t\t3. Quit";
		gotoxy(10, 13); cout << "\t\t\t\t\tSelect option: ";
		char op = _getche();

		if (op == '1') {
			PlaySound("music1.wav", NULL, SND_ASYNC);
			play();
		}
		else if (op == '2') {
			instructions();
		}
		else if (op == '3') {
			exit(0);
		}
	}

	return 0;
}
